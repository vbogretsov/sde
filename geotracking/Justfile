set dotenv-path := ".env"

export CONNECT_ADDR := "http://localhost:8083"
export CHPORT := "9001"

bootstrap:
    @openssl rand -base64 756 > ./env/mongo/mongo.key
    @chmod 400 ./env/mongo/mongo.key


init:
    @just m-rs
    @just ch-init
    @just app-init
    @just cn-init


m-sh CONTAINER:
    @docker compose exec {{CONTAINER}} mongosh \
        -u $MONGO_USER \
        -p $MONGO_PASSWORD \
        --authenticationDatabase admin $MONGO_DATABASE

# writeConcernMajorityJournalDefault: true
m-rs:
    @echo Initializing MongoDB ReplicaSet
    @docker compose exec m-1 mongosh \
        -u $MONGO_USER \
        -p $MONGO_PASSWORD \
        --authenticationDatabase admin $MONGO_DATABASE \
        --eval 'rs.initiate({ \
            _id: "rs0", \
            members: [ \
                { _id: 0, host: "m-1:27017" }, \
                { _id: 1, host: "m-2:27017" }, \
                { _id: 2, host: "m-3:27017" }, \
            ]\
        })'


app-init:
    @echo Initializing Application...
    @docker compose --profile app run --rm app-init


cn-init:
    @echo Creating Kafka Connect connectors...
    @curl -X POST -H 'Content-Type: application/json' $CONNECT_ADDR/connectors \
        -d @app/cn/src-mongo.json
    @curl -X POST -H 'Content-Type: application/json' $CONNECT_ADDR/connectors \
        -d @app/cn/dst-s3-1.json
    @curl -X POST -H 'Content-Type: application/json' $CONNECT_ADDR/connectors \
        -d @app/cn/dst-s3-2.json


ch-init:
    @echo Creting ClickHouse tables...
    @clickhouse client --port ${CHPORT} --password ${CLICKHOUSE_ADMIN_PASSWORD} \
        -q 'CREATE DATABASE IF NOT EXISTS app ON CLUSTER cluster'
    @clickhouse client --port ${CHPORT} --password ${CLICKHOUSE_ADMIN_PASSWORD} \
        -q 'CREATE DATABASE IF NOT EXISTS mon ON CLUSTER cluster'
    @docker compose --profile app run --rm dp init


cn-s3-debug:
    curl -X PUT $CONNECT_ADDR/admin/loggers/io.confluent.connect.s3 \
        -H "Content-Type: application/json" \
        -d '{"level": "DEBUG"}'


ch-sh DB:
    @clickhouse client --port ${CHPORT} --password ${CLICKHOUSE_DEFAULT_PASSWORD} \
        -d {{DB}}

ch-q CONTAINER QUERY:
    @docker compose exec {{CONTAINER}} clickhouse-client \
        --password ${CLICKHOUSE_DEFAULT_PASSWORD} \
        -q "{{QUERY}}"


log CONTAINER:
    @docker compose logs --no-log-prefix --tail 100 -f {{CONTAINER}}


down:
    @docker compose stop app-1
    @docker compose stop app-2
    @docker compose stop wrk-1
    @docker compose stop wrk-2
    @docker compose stop wrk-3
    @docker compose stop wrk-4
    @docker compose stop dp
    @docker compose down
    # @docker compose down -v


perf:
    @docker compose run --rm wrkx -c 100 -t 2 -d 60s -R 40000 -s /src/post_locations.lua http://app:8000/api/track/locations -- 10000


prev-upload:
    @docker compose run aws aws --endpoint-url http://s3:9000 s3 cp --recursive /data/prev/app.app.track_locations s3://data/topics/app.app.track_locations


prev-download:
    @docker compose run aws aws --endpoint-url http://s3:9000 s3 cp --recursive s3://data/topics/app.app.track_locations /data/prev/app.app.track_locations



[working-directory: 'app/fe']
web:
    @npm run dev


[working-directory: 'bin/emulate']
emulate NUM_USERS="5000" CONCURRENCY="250" MIN_USER_ID="1":
    #!/usr/bin/env bash
    export NUM_USERS={{NUM_USERS}}
    export CONCURRENCY={{CONCURRENCY}}
    export MIN_USER_ID={{MIN_USER_ID}}
    source .dlpath

    while true; do
        env DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH node emulate.js
        sleep 3
    done


clean:
    @rm -rf data/sink/*
    @rm -rf data/s3/1/*
    @rm -rf data/s3/2/*
    @rm -rf data/s3/3/*
